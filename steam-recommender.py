# -*- coding: utf-8 -*-
"""fuck eric

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kVw_3I_4wL-E6-Aw4WJ_C-j85m85KZa8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
import math
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from sklearn.metrics.pairwise import cosine_similarity
import re

# reads in the csv
df_main = pd.read_csv('steam.csv')
df_desc = pd.read_csv('steam_description_data.csv')

# cleans HTML sytax off descriptions
def cleanhtml(raw_html):
  cleanr = re.compile('<.*?>')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext


df_desc = df_desc.drop(columns = ['about_the_game', 'short_description'])
df_desc['detailed_description'] = df_desc['detailed_description'].apply(cleanhtml)
df_desc['detailed_description'] = df_desc['detailed_description'].fillna('')


df_new = df_main.merge(df_desc, left_on = 'appid', right_on = 'steam_appid')
df_new = df_new.drop(columns = ['steam_appid'])


# initializes recommendation metrics
df_new['rating'] = 0
df_new['desc rating'] = 0
df_new['tag rating'] = 0
df_new['dev rating'] = 0

# example user info
user_games_name = ['Helldivers 2', 'Sekiro: Shadows Die Twice', 'Lethal Company']
user_price = 60
user_linux = False
user_mac = False
user_windows = True

#converts name to app ID
def nameToID(names):
    temp = df_new.loc[df_new['name'].isin(names)]
    return temp['appid'].tolist()

user_games_appid = nameToID(user_games_name)

temp_df = df_new[df_new['appid'].isin(user_games_appid)]

# filters out negatively rated games
df_new = df_new.loc[~df_new['appid'].isin(user_games_appid)]
df_new = df_new[df_new['positive_ratings'] + df_new['negative_ratings'] > 500]
df_new = df_new.append(temp_df, ignore_index = True)
df_new = df_new.reset_index()

user_games_index = []
for game in user_games_appid :
  user_games_index.append(df_new.index[df_new['appid'] == game].values[0])

# uses TFIDF and Cosine Similarity Matrix to identify similar descriptions
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df_new['detailed_description'])
desc_cos_sim = linear_kernel(tfidf_matrix, tfidf_matrix)


def descriptionAnalysis(game_num) :
  global df_new
  global desc_cos_sim
  df_new['desc rating'] += desc_cos_sim[game_num]

#uses CountVectorizer to create similarity matrices
dev_matrix = CountVectorizer().fit_transform(df_new['developer'])
dev_cos_sim = linear_kernel(dev_matrix, dev_matrix)
tag_matrix = CountVectorizer().fit_transform(df_new['steamspy_tags'])
tag_cos_sim = cosine_similarity(tag_matrix)

def tagAnalysis(game_num) :
  global df_new
  global tag_cos_sim

  df_new['tag rating'] += tag_cos_sim[game_num]

for game in user_games_index :
  descriptionAnalysis(game)
  tagAnalysis(game)
  developerAnalysis(game)

for game in user_games_index:
  df_new = df_new.drop(index = game)

# creates a recommendation rating by weighing each component by importance.
# weights can be changed based on personal preference.
df_new['rating'] = df_new['tag rating'] + (0.5 * df_new['desc rating']) + (0.3 * df_new['dev rating'])
df_new['rating'] = df_new['rating'] * (0.5 * np.log10(df_new['positive_ratings']))

df_new = df_new.sort_values(by = ['rating'], ascending = False)


def filter_df(df, col, values):
    temp = df.loc[df[col].isin(values)]
    return temp


def filter_platforms(df, windows = False, mac = False, linux = False):
    if windows and mac:
        return df
    if windows:
        return filter_df(df, 'platforms', ['windows', 'windows;mac', 'windows;linux', 'windows;mac;linux'])
    if mac and linux:
        return filter_df(df, 'platforms', ['windows;mac', 'windows;linux', 'windows;mac;linux', 'mac'])
    if mac:
        return filter_df(df, 'platforms', ['windows;mac', 'windows;mac;linux', 'mac'])
    if linux:
        return filter_df(df, 'platforms', ['windows;linux', 'windows;mac;linux'])
    else:
        print('No available platforms.')
        quit()


def filter_price(df, price):
    return df.loc[df['price'] < price]


platform_df = filter_platforms(df_new, windows = user_windows, mac = user_mac, linux = user_linux)
final_df = filter_price(platform_df, user_price)


number_of_recs = 10

print("Your Recommendations:")
print("")

for i in range(number_of_recs) :
  print(str(i + 1) + ". " + final_df.iloc[i]['name'])
  print("Rating: " + str(final_df.iloc[i]['rating'])[:4])
  print("Price: $" + str(final_df.iloc[i]['price']))
  print("")